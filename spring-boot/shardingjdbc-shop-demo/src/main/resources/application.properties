
server.port=8080

spring.main.allow-bean-definition-overriding=true
mybatis.configuration.map-underscore-to-camel-case=true

#  ===================config sharding jdbc start ==========================
#配置数据源: 商品的两个分库，店铺库 * 2 （主m，从s）,共6个数据源
spring.shardingsphere.datasource.names=mp1,mp2,mc0,sp1,sp2,sc0

spring.shardingsphere.datasource.mp1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.mp1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.mp1.url=jdbc:mysql://192.168.0.120:3306/product_db_1?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.mp1.username=root
spring.shardingsphere.datasource.mp1.password=123456

spring.shardingsphere.datasource.mp2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.mp2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.mp2.url=jdbc:mysql://192.168.0.120:3306/product_db_2?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.mp2.username=root
spring.shardingsphere.datasource.mp2.password=123456

spring.shardingsphere.datasource.mc0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.mc0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.mc0.url=jdbc:mysql://192.168.0.120:3306/store_db?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.mc0.username=root
spring.shardingsphere.datasource.mc0.password=123456

spring.shardingsphere.datasource.sp1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.sp1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.sp1.url=jdbc:mysql://192.168.0.119:3306/product_db_1?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.sp1.username=root
spring.shardingsphere.datasource.sp1.password=123456

spring.shardingsphere.datasource.sp2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.sp2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.sp2.url=jdbc:mysql://192.168.0.119:3306/product_db_2?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.sp2.username=root
spring.shardingsphere.datasource.sp2.password=123456

spring.shardingsphere.datasource.sc0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.sc0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.sc0.url=jdbc:mysql://192.168.0.119:3306/store_db?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.shardingsphere.datasource.sc0.username=root
spring.shardingsphere.datasource.sc0.password=123456

#数据源之间的主从关系
spring.shardingsphere.sharding.master-slave-rules.ms0.master-data-source-name=mp1
spring.shardingsphere.sharding.master-slave-rules.ms0.slave-data-source-names=sp1

spring.shardingsphere.sharding.master-slave-rules.ms1.master-data-source-name=mp2
spring.shardingsphere.sharding.master-slave-rules.ms1.slave-data-source-names=sp2

spring.shardingsphere.sharding.master-slave-rules.ms2.master-data-source-name=mc0
spring.shardingsphere.sharding.master-slave-rules.ms2.slave-data-source-names=sc0

#水平分库策略 ： 分片键和分片算法
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=store_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ms$->{store_id % 2}

#分表策略
# store_info表
spring.shardingsphere.sharding.tables.store_info.actual-data-nodes=ms2.store_info
spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.store_info.table-strategy.inline.algorithm-expression=store_info

# product_info表
spring.shardingsphere.sharding.tables.product_info.actual-data-nodes=ms$->{0..1}.product_info_$->{1..2}
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.sharding-column=product_info_id
spring.shardingsphere.sharding.tables.product_info.table-strategy.inline.algorithm-expression=product_info_$->{product_info_id % 2 + 1}
spring.shardingsphere.sharding.tables.product_info.key-generator.column=product_info_id
spring.shardingsphere.sharding.tables.product_info.key-generator.type=SNOWFLAKE

# product_descript表
spring.shardingsphere.sharding.tables.product_descript.actual-data-nodes=ms$->{0..1}.product_descript_$->{1..2}
spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.sharding-column=product_info_id
spring.shardingsphere.sharding.tables.product_descript.table-strategy.inline.algorithm-expression=product_descript_$->{product_info_id % 2 + 1}
spring.shardingsphere.sharding.tables.product_descript.key-generator.column=id
spring.shardingsphere.sharding.tables.product_descript.key-generator.type=SNOWFLAKE

#设置 product_descript 和 product_info的绑定关系
spring.shardingsphere.sharding.binding-tables[0]=product_info, product_descript

#公共表 | 广播表
spring.shardingsphere.sharding.broadcast-tables=region


#  ===================config sharding jdbc end ==========================


#显示真实sql
spring.shardingsphere.props.sql.show=true

#logging
logging.level.root=info
logging.level.org.springframework.web=info
logging.level.own.stu.shardingjdbc.shardingjdbc.simple=debug
logging.level.org.apache.shardingsphere=debug
logging.level.druid.sql=debug
logging.level.org.apache.commons.dbcp2=debug